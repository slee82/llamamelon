/* The following code was generated by JFlex 1.4.2 on 12/9/09 5:30 PM */

/*
 * COMS W4119 PROGRAMMING LANGUAGES AND TRANSLATORS FALL 2009
 * Team llamamelon - BALL language
 * ball.lex - Lexer specification of the BALL language (using JFlex)
 */

package compiler;
import lexer.*;
import codegen.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 12/9/09 5:30 PM from the specification file
 * <tt>src/compiler/ball.lex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\32\1\3\1\2\1\0\1\3\1\1\16\32\4\0\1\3\1\0"+
    "\1\6\1\0\1\33\1\41\2\0\1\42\1\43\1\5\1\37\1\35"+
    "\1\40\1\11\1\4\1\10\11\10\1\44\1\34\1\0\1\36\3\0"+
    "\32\33\1\0\1\7\2\0\1\33\1\0\1\25\1\15\1\46\1\47"+
    "\1\16\1\45\1\23\1\31\1\22\2\33\1\24\1\14\1\12\1\30"+
    "\1\26\1\33\1\17\1\20\1\21\1\13\3\33\1\27\1\33\4\0"+
    "\41\32\2\0\4\33\4\0\1\33\2\0\1\32\7\0\1\33\4\0"+
    "\1\33\5\0\27\33\1\0\37\33\1\0\u013f\33\31\0\162\33\4\0"+
    "\14\33\16\0\5\33\11\0\1\33\21\0\130\32\5\0\23\32\12\0"+
    "\1\33\13\0\1\33\1\0\3\33\1\0\1\33\1\0\24\33\1\0"+
    "\54\33\1\0\46\33\1\0\5\33\4\0\202\33\1\0\4\32\3\0"+
    "\105\33\1\0\46\33\2\0\2\33\6\0\20\33\41\0\46\33\2\0"+
    "\1\33\7\0\47\33\11\0\21\32\1\0\27\32\1\0\3\32\1\0"+
    "\1\32\1\0\2\32\1\0\1\32\13\0\33\33\5\0\3\33\15\0"+
    "\4\32\14\0\6\32\13\0\32\33\5\0\13\33\16\32\7\0\12\32"+
    "\4\0\2\33\1\32\143\33\1\0\1\33\10\32\1\0\6\32\2\33"+
    "\2\32\1\0\4\32\2\33\12\32\3\33\2\0\1\33\17\0\1\32"+
    "\1\33\1\32\36\33\33\32\2\0\3\33\60\0\46\33\13\32\1\33"+
    "\u014f\0\3\32\66\33\2\0\1\32\1\33\20\32\2\0\1\33\4\32"+
    "\3\0\12\33\2\32\2\0\12\32\21\0\3\32\1\0\10\33\2\0"+
    "\2\33\2\0\26\33\1\0\7\33\1\0\1\33\3\0\4\33\2\0"+
    "\1\32\1\33\7\32\2\0\2\32\2\0\3\32\11\0\1\32\4\0"+
    "\2\33\1\0\3\33\2\32\2\0\12\32\4\33\15\0\3\32\1\0"+
    "\6\33\4\0\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0"+
    "\2\33\1\0\2\33\2\0\1\32\1\0\5\32\4\0\2\32\2\0"+
    "\3\32\13\0\4\33\1\0\1\33\7\0\14\32\3\33\14\0\3\32"+
    "\1\0\11\33\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33"+
    "\1\0\5\33\2\0\1\32\1\33\10\32\1\0\3\32\1\0\3\32"+
    "\2\0\1\33\17\0\2\33\2\32\2\0\12\32\1\0\1\33\17\0"+
    "\3\32\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0"+
    "\2\33\1\0\5\33\2\0\1\32\1\33\6\32\3\0\2\32\2\0"+
    "\3\32\10\0\2\32\4\0\2\33\1\0\3\33\4\0\12\32\1\0"+
    "\1\33\20\0\1\32\1\33\1\0\6\33\3\0\3\33\1\0\4\33"+
    "\3\0\2\33\1\0\1\33\1\0\2\33\3\0\2\33\3\0\3\33"+
    "\3\0\10\33\1\0\3\33\4\0\5\32\3\0\3\32\1\0\4\32"+
    "\11\0\1\32\17\0\11\32\11\0\1\33\7\0\3\32\1\0\10\33"+
    "\1\0\3\33\1\0\27\33\1\0\12\33\1\0\5\33\4\0\7\32"+
    "\1\0\3\32\1\0\4\32\7\0\2\32\11\0\2\33\4\0\12\32"+
    "\22\0\2\32\1\0\10\33\1\0\3\33\1\0\27\33\1\0\12\33"+
    "\1\0\5\33\2\0\1\32\1\33\7\32\1\0\3\32\1\0\4\32"+
    "\7\0\2\32\7\0\1\33\1\0\2\33\4\0\12\32\22\0\2\32"+
    "\1\0\10\33\1\0\3\33\1\0\27\33\1\0\20\33\4\0\6\32"+
    "\2\0\3\32\1\0\4\32\11\0\1\32\10\0\2\33\4\0\12\32"+
    "\22\0\2\32\1\0\22\33\3\0\30\33\1\0\11\33\1\0\1\33"+
    "\2\0\7\33\3\0\1\32\4\0\6\32\1\0\1\32\1\0\10\32"+
    "\22\0\2\32\15\0\60\33\1\32\2\33\7\32\4\0\10\33\10\32"+
    "\1\0\12\32\47\0\2\33\1\0\1\33\2\0\2\33\1\0\1\33"+
    "\2\0\1\33\6\0\4\33\1\0\7\33\1\0\3\33\1\0\1\33"+
    "\1\0\1\33\2\0\2\33\1\0\4\33\1\32\2\33\6\32\1\0"+
    "\2\32\1\33\2\0\5\33\1\0\1\33\1\0\6\32\2\0\12\32"+
    "\2\0\2\33\42\0\1\33\27\0\2\32\6\0\12\32\13\0\1\32"+
    "\1\0\1\32\1\0\1\32\4\0\2\32\10\33\1\0\42\33\6\0"+
    "\24\32\1\0\2\32\4\33\4\0\10\32\1\0\44\32\11\0\1\32"+
    "\71\0\42\33\1\0\5\33\1\0\2\33\1\0\7\32\3\0\4\32"+
    "\6\0\12\32\6\0\6\33\4\32\106\0\46\33\12\0\51\33\7\0"+
    "\132\33\5\0\104\33\5\0\122\33\6\0\7\33\1\0\77\33\1\0"+
    "\1\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0\4\33\2\0"+
    "\47\33\1\0\1\33\1\0\4\33\2\0\37\33\1\0\1\33\1\0"+
    "\4\33\2\0\7\33\1\0\1\33\1\0\4\33\2\0\7\33\1\0"+
    "\7\33\1\0\27\33\1\0\37\33\1\0\1\33\1\0\4\33\2\0"+
    "\7\33\1\0\47\33\1\0\23\33\16\0\11\32\56\0\125\33\14\0"+
    "\u026c\33\2\0\10\33\12\0\32\33\5\0\113\33\3\0\3\33\17\0"+
    "\15\33\1\0\4\33\3\32\13\0\22\33\3\32\13\0\22\33\2\32"+
    "\14\0\15\33\1\0\3\33\1\0\2\32\14\0\64\33\40\32\3\0"+
    "\1\33\3\0\2\33\1\32\2\0\12\32\41\0\3\32\2\0\12\32"+
    "\6\0\130\33\10\0\51\33\1\32\126\0\35\33\3\0\14\32\4\0"+
    "\14\32\12\0\12\32\36\33\2\0\5\33\u038b\0\154\33\224\0\234\33"+
    "\4\0\132\33\6\0\26\33\2\0\6\33\2\0\46\33\2\0\6\33"+
    "\2\0\10\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0\37\33"+
    "\2\0\65\33\1\0\7\33\1\0\1\33\3\0\3\33\1\0\7\33"+
    "\3\0\4\33\2\0\6\33\4\0\15\33\5\0\3\33\1\0\7\33"+
    "\17\0\4\32\32\0\5\32\20\0\2\33\23\0\1\33\13\0\4\32"+
    "\6\0\6\32\1\0\1\33\15\0\1\33\40\0\22\33\36\0\15\32"+
    "\4\0\1\32\3\0\6\32\27\0\1\33\4\0\1\33\2\0\12\33"+
    "\1\0\1\33\3\0\5\33\6\0\1\33\1\0\1\33\1\0\1\33"+
    "\1\0\4\33\1\0\3\33\1\0\7\33\3\0\3\33\5\0\5\33"+
    "\26\0\44\33\u0e81\0\3\33\31\0\11\33\6\32\1\0\5\33\2\0"+
    "\5\33\4\0\126\33\2\0\2\32\2\0\3\33\1\0\137\33\5\0"+
    "\50\33\4\0\136\33\21\0\30\33\70\0\20\33\u0200\0\u19b6\33\112\0"+
    "\u51a6\33\132\0\u048d\33\u0773\0\u2ba4\33\u215c\0\u012e\33\2\0\73\33\225\0"+
    "\7\33\14\0\5\33\5\0\1\33\1\32\12\33\1\0\15\33\1\0"+
    "\5\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0\154\33\41\0"+
    "\u016b\33\22\0\100\33\2\0\66\33\50\0\15\33\3\0\20\32\20\0"+
    "\4\32\17\0\2\33\30\0\3\33\31\0\1\33\6\0\5\33\1\0"+
    "\207\33\2\0\1\32\4\0\1\33\13\0\12\32\7\0\32\33\4\0"+
    "\1\33\1\0\32\33\12\0\132\33\3\0\6\33\2\0\6\33\2\0"+
    "\6\33\2\0\3\33\3\0\2\33\3\0\2\33\22\0\3\32\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\3\0\1\2\1\0\11\3\1\0\1\4"+
    "\1\5\1\6\3\0\1\7\1\10\1\11\1\3\2\0"+
    "\1\12\1\13\1\14\1\0\1\2\7\3\1\15\3\3"+
    "\1\16\1\17\1\20\1\3\2\0\2\3\1\21\10\3"+
    "\1\0\1\1\3\3\1\22\7\3\1\23\1\3\1\24"+
    "\2\3\1\25\3\3\1\26\2\3\1\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\120\0\120\0\120\0\u02d0\0\u02f8\0\u0320"+
    "\0\120\0\120\0\120\0\u0348\0\u0370\0\u0398\0\120\0\120"+
    "\0\120\0\u03c0\0\u0118\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0168\0\u0500\0\u0528\0\u0550\0\120\0\120"+
    "\0\120\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0168\0\u0640"+
    "\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u05a0\0\u07a8\0\u07d0\0\u07f8\0\u0168\0\u0820\0\u0848\0\u0870"+
    "\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0168\0\u0938\0\u0960\0\u0988"+
    "\0\u09b0\0\u0168\0\u09d8\0\u0a00\0\u0a28\0\u0168\0\u0a50\0\u0a78"+
    "\0\u0168";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\2\3\1\4\1\5\1\6\1\0\1\7"+
    "\1\10\1\11\3\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\12\1\20\1\12\1\21\3\12\1\22\1\12\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\2\12\2\0\1\3\121\0\1\35\1\36\30\0"+
    "\1\37\47\0\1\40\11\0\6\6\1\41\1\42\40\6"+
    "\10\0\1\7\1\10\20\12\1\22\1\12\11\0\3\12"+
    "\10\0\1\43\47\0\1\12\1\0\1\12\1\44\14\12"+
    "\1\45\3\12\11\0\3\12\10\0\1\12\1\0\22\12"+
    "\11\0\3\12\10\0\1\12\1\0\1\46\21\12\11\0"+
    "\3\12\10\0\1\12\1\0\4\12\1\47\15\12\11\0"+
    "\3\12\10\0\1\12\1\0\7\12\1\50\1\51\11\12"+
    "\11\0\3\12\10\0\1\12\1\0\4\12\1\52\15\12"+
    "\11\0\3\12\10\0\1\12\1\0\6\12\1\53\13\12"+
    "\11\0\3\12\10\0\1\12\1\0\10\12\1\54\11\12"+
    "\11\0\3\12\10\0\1\12\1\0\5\12\1\55\4\12"+
    "\1\56\7\12\11\0\3\12\10\0\1\22\1\0\20\12"+
    "\1\22\1\12\11\0\3\12\36\0\1\57\47\0\1\60"+
    "\47\0\1\61\21\0\1\12\1\0\1\12\1\62\20\12"+
    "\11\0\3\12\1\35\1\2\1\3\45\35\5\63\1\64"+
    "\42\63\2\6\1\0\45\6\10\0\1\12\1\0\2\12"+
    "\1\65\17\12\11\0\3\12\10\0\1\12\1\0\7\12"+
    "\1\66\12\12\11\0\3\12\10\0\1\12\1\0\22\12"+
    "\11\0\2\12\1\67\10\0\1\12\1\0\7\12\1\70"+
    "\12\12\11\0\3\12\10\0\1\12\1\0\5\12\1\71"+
    "\5\12\1\72\6\12\11\0\3\12\10\0\1\12\1\0"+
    "\2\12\1\73\17\12\11\0\3\12\10\0\1\12\1\0"+
    "\13\12\1\74\6\12\11\0\3\12\10\0\1\12\1\0"+
    "\6\12\1\72\13\12\11\0\3\12\10\0\1\12\1\0"+
    "\10\12\1\75\11\12\11\0\3\12\10\0\1\12\1\0"+
    "\13\12\1\76\6\12\11\0\3\12\10\0\1\12\1\0"+
    "\1\77\21\12\11\0\3\12\5\63\1\100\46\63\1\101"+
    "\1\100\42\63\10\0\1\12\1\0\3\12\1\102\16\12"+
    "\11\0\3\12\10\0\1\12\1\0\17\12\1\71\2\12"+
    "\11\0\3\12\10\0\1\12\1\0\1\12\1\103\20\12"+
    "\11\0\3\12\10\0\1\12\1\0\10\12\1\104\11\12"+
    "\11\0\3\12\10\0\1\12\1\0\7\12\1\105\12\12"+
    "\11\0\3\12\10\0\1\12\1\0\22\12\11\0\1\106"+
    "\2\12\10\0\1\12\1\0\2\12\1\105\17\12\11\0"+
    "\3\12\10\0\1\12\1\0\1\107\21\12\11\0\3\12"+
    "\10\0\1\12\1\0\15\12\1\102\4\12\11\0\3\12"+
    "\10\0\1\12\1\0\22\12\11\0\1\12\1\110\1\12"+
    "\4\63\1\3\1\100\42\63\10\0\1\12\1\0\4\12"+
    "\1\111\15\12\11\0\3\12\10\0\1\12\1\0\5\12"+
    "\1\112\14\12\11\0\3\12\10\0\1\12\1\0\1\113"+
    "\21\12\11\0\3\12\10\0\1\12\1\0\1\12\1\114"+
    "\20\12\11\0\3\12\10\0\1\12\1\0\7\12\1\115"+
    "\12\12\11\0\3\12\10\0\1\12\1\0\7\12\1\116"+
    "\12\12\11\0\3\12\10\0\1\12\1\0\5\12\1\105"+
    "\14\12\11\0\3\12\10\0\1\12\1\0\1\117\21\12"+
    "\11\0\3\12\10\0\1\12\1\0\11\12\1\105\10\12"+
    "\11\0\3\12\10\0\1\12\1\0\1\120\21\12\11\0"+
    "\3\12\10\0\1\12\1\0\10\12\1\121\11\12\11\0"+
    "\3\12\10\0\1\12\1\0\6\12\1\122\13\12\11\0"+
    "\3\12\10\0\1\12\1\0\22\12\11\0\1\12\1\123"+
    "\1\12\10\0\1\12\1\0\16\12\1\124\3\12\11\0"+
    "\3\12\10\0\1\12\1\0\7\12\1\125\12\12\11\0"+
    "\3\12\10\0\1\12\1\0\1\126\21\12\11\0\3\12"+
    "\10\0\1\12\1\0\10\12\1\127\11\12\11\0\3\12"+
    "\10\0\1\12\1\0\16\12\1\130\3\12\11\0\3\12"+
    "\10\0\1\12\1\0\1\131\21\12\11\0\3\12";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\3\0\1\1\1\0\11\1\1\0"+
    "\3\11\3\0\3\11\1\1\2\0\3\11\1\0\14\1"+
    "\3\11\1\1\2\0\13\1\1\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    /* store a reference to the parser object */
    private Parser yyparser;

    /* store a reference to the symbol table */
    private SymbolTable table;

    /* 
     * constructor initializes both the parser and table references.
     */
    public Yylex(java.io.Reader source, Parser yyparser, SymbolTable table) {
        this(source);
        this.yyparser = yyparser;
        this.table = table;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1740) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { /* got a type, notify parser */
		        Type t = new Type(yytext());
		        yyparser.yylval = new ParserVal(t);
		        System.err.println("lexer: found type " + t);
		        return Parser.TYPE;
          }
        case 24: break;
        case 7: 
          { return Parser.OPAREN;
          }
        case 25: break;
        case 11: 
          { return Parser.MULTEQL;
          }
        case 26: break;
        case 22: 
          { yyparser.yylval = new ParserVal(Keyword.function);
                    return Parser.FUNCTION;
          }
        case 27: break;
        case 19: 
          { /* got a print statement, notify parser */
                    System.err.println("lexer: found 'print'");
                    yyparser.yylval =  new ParserVal(Keyword.print);
                    return Parser.PRINT; // TODO: couple return with table reference
          }
        case 28: break;
        case 17: 
          { yyparser.yylval = new ParserVal(Keyword.end);
                    return Parser.END;
          }
        case 29: break;
        case 6: 
          { return Parser.EQL;
          }
        case 30: break;
        case 14: 
          { return Parser.PLUSEQL;
          }
        case 31: break;
        case 12: 
          { /* got a string, add to sym. tbl. and notify parser */
                    // TODO: add symbol table addition code here
		    System.err.println("lexer: found a String Const");
                    StringConst s = new StringConst(yytext());
                    //table.putEntry(s, null);
                    yyparser.yylval = new ParserVal(s);
                    return Parser.STRING; // TODO: couple return with table reference
          }
        case 32: break;
        case 8: 
          { return Parser.CPAREN;
          }
        case 33: break;
        case 5: 
          { return Parser.COMMA;
          }
        case 34: break;
        case 10: 
          { return Parser.DIVEQL;
          }
        case 35: break;
        case 16: 
          { return Parser.MODEQL;
          }
        case 36: break;
        case 13: 
          { return Parser.IS;
          }
        case 37: break;
        case 4: 
          { return Parser.SEMICOLON;
          }
        case 38: break;
        case 9: 
          { return Parser.COLON;
          }
        case 39: break;
        case 23: 
          { yyparser.yylval = new ParserVal(Keyword.simfunction);
                    return Parser.SIMFUNCTION;
          }
        case 40: break;
        case 21: 
          { yyparser.yylval = new ParserVal(Keyword.returns);
                    return Parser.RETURNS;
          }
        case 41: break;
        case 15: 
          { return Parser.MINEQL;
          }
        case 42: break;
        case 2: 
          { /* got a number, add to sym. tbl. and notify parser */
		            NumericConst n = new NumericConst(yytext());
                    //table.putEntry(n, null);
                    yyparser.yylval = new ParserVal(n);
                    System.err.println("lexer: found a Numeric Const " + n);
                    return Parser.NUMBER; // TODO: couple return with table reference
          }
        case 43: break;
        case 20: 
          { yyparser.yylval = new ParserVal(Keyword.ret);
                    return Parser.RETURN;
          }
        case 44: break;
        case 1: 
          { /* ignore */
          }
        case 45: break;
        case 3: 
          { /* got an identifier, notify parser */
		    Identifier i = new Identifier(yytext());
		    yyparser.yylval = new ParserVal(i);
		    System.err.println("lexer: found identifier \"" + i.getID() + "\"");
            
            // add the identifier to the symbol table in case we need it later
            //table.putEntry(i, null);
		    return Parser.IDENTIFIER;
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return 0; }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
