/***STATS DEFINITION***/ 
/*Batter probabilities*/ 
stat AVG = H / AB;     // Creates a new AVG stat
stat PA = AB + BB;     
stat bWalk = BB / PA;stat bSingle = (H - (2B + 3B + HR))/ PA;stat bDouble = 2B / PA;stat bTriple = 3B / PA;stat bHR = HR / PA;

/*Pitcher probabilities*/ 
stat BF = H + BB + K;
stat pWalk = BB / BF;
stat pDouble = H * .174 / BF;
stat pTriple = H * .024 / BF;
stat pHR = HR / BF;
stat pSingle = (H / BF) - pHR - pTriple - pDouble;

/***END STATS DEFINITION***/

/*Global variables that hold combined probabilities 
    given a pitcher and a batter*/
number probWalk = 0; 
number probSingle = 0;
number probDouble = 0; 
number probTriple = 0; 
number probHR = 0;

/*This is a general-purpose function that calculates combined 
    probabilities given a pitcher and a batter. It takes the
    max of both: average is not a good estimate.*/
    function combineProb (player batter, player pitcher) 
        returns nothing:    probWalk = max(pitcher's pWalk, batter's bWalk);    probSingle = max(pitcher's pSingle, batter's bSingle);    probDouble = max(pitcher's pDouble, batter's bDouble);    probTriple = max(pitcher's pTriple, batter's bTriple);    probHR = max(pitcher's pHR, batter's bHR);end/*General Purpose function that takes the values generated by 
    combineProb and randomizes them (gives them 10% 
    of randomness) for more realistic results*/
    
function randomizeProbabilities() returns nothing:
    probWalk = rand(probWalk - probWalk*.1, probWalk 
        + probWalk*.1);
    probSingle = rand(probSingle - probSingle*.1, probSingle 
        + probSingle*.1);
    probDouble = rand(probDouble - probDouble*.1, probDouble 
        + probDouble*.1);
    probTriple = rand(probTriple - probTriple*.1, probTriple 
        + probTriple*.1);
    probHR = rand(probHR - probHR*.1, probHR + probHR*.1);
end
/*BASIC SIMULATION FUNCTION*/ 
simfunction basicSimulation is:    number team1Score = 0; 
    number team2Score = 0;/*Note: team1 and team2 are global 
    variables that represent the teams that the 
    sim function is currently working with. 
    The sim function sets them automatically.*/
    /*team1 is batting and team2 is pitching! (5 times)*/ 
do 5 times:/*Select random players from the best 9 of each team*/ 
    list of player bestBatters = topPlayers(9, team1's BATTERS, AVG); 
    player batter = any bestBatters;    list of player bestPitchers = topPlayers(4, team2's PITCHERS, AVG); 
    player pitcher = any bestPitchers;
    /*Set the global probabilities of this inning*/ 
combineProb(batter, pitcher);

/*Add a little randomness*/
    randomizeProbabilities();    team1Score += probWalk*(1/4) + probSingle*(1/4) 
        + probDouble*(2/4) + probTriple*(3/4) + probHR;
end/*team2 is batting and team1 is pitching! (5 times)*/do 5 times:    bestBatters = topPlayers(9, team2's BATTERS, AVG);    batter = any bestBatters;    bestPitchers = topPlayers(4, team1's PITCHERS, AVG);    pitcher = any bestPitchers;
     combineProb(batter, pitcher);    randomizeProbabilities();    team2Score += probWalk*(1/4) + probSingle*(1/4) 
        + probDouble*(2/4) + probTriple*(3/4) + probHR;endif (team1Score > team2Score) then:    print team1's name + " defeat " + team2's name + "!!";    return team1;else:    print team2's name + " defeat "  + team1's name + "!!";    return team2;    endend/*END SIMULATION FUNCTION*/activate basicSimulation;

team Astros = load("Astros.team");
team Dodgers = load("Dodgers.team");team winner = sim(Astros, Dodgers, 7);print winner's name + " have won the World Series!!\n";
print winner's name + " has the players:";
foreach p in winner's PLAYERS do:
    print p's name;end
